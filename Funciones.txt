/*FUNCIONES EJERCICIOS*/

/*1. Crea una función en la que dado un número de habitación y una fecha nos devuelva el precio de esa 
habitación en esa fecha en régimen de sólo alojamiento.*/

create or replace function preciohabitacion(auxNum habitacion.numero%type, auxFecha calendreservas.fecha%type) return number 
is
auxPrecio number := 0;

    cursor c1 is 
        select c.habitacion hab, c.fecha fecha, p.psa precio from pvptemporada p, calendreservas c, habitacion h
        where c.habitacion = h.numero and h.categoria = p.categoria;
begin
    dbms_output.enable();
    for regc1 in c1 loop
        if regc1.hab = auxNum and regc1.fecha = auxFecha then
            auxPrecio := regc1.precio;
        end if;
    end loop;
    
    return auxPrecio;
end;


SELECT preciohabitacion(8, '01/11/12') FROM dual; 



/*2. Crea una función en la que dada una categoría de habitación, una fecha y un régimen alimenticio(SA, AD, MP, PC)
nos devuelva el precio que corresponda.*/

set serveroutput on;

create or replace function precioHabitacion2(auxCat habitacion.categoria%type, auxFecha calendreservas.fecha%type, auxAliment calendreservas.alimentacion%type) 
return number 
is
auxPrecio number := 0;

    cursor c1 is 
        select psa, pad, pmp, ppc from pvptemporada p, habitacion h, calendreservas c
        where p.categoria = h.categoria and h.categoria = auxCat and h.numero = c.habitacion and c.fecha = auxFecha;
begin
    for regc1 in c1 loop
        if auxAliment = 'SA' then 
            auxPrecio := regc1.psa;
        elsif auxAliment = 'AD' then
            auxPrecio := regc1.pad;
        elsif auxAliment = 'MP' then
            auxPrecio := regc1.pmp;
        elsif auxAliment = 'PC' then
            auxPrecio := regc1.ppc;
        end if;
    end loop;
    return auxPrecio;
end;
        
select preciohabitacion2('S', '01/11/12', 'SA') from dual;


/*3. Crea una función que dado un NIF de empleado de servicios y una fecha nos indique cuantas citas tiene previstas 
para ese día.*/

create or replace function citasEmpleado(auxNif empleado.nif%type, auxFecha cita.fecha%type) return number 
is 
auxCont number := 0;
    cursor c1 is 
        select empleado, fecha from cita;
begin
    for regc1 in c1 loop
        if regc1.empleado = auxNif and regc1.fecha = auxFecha then
            auxCont := auxCont + 1;
        end if;
    end loop;
    
    return auxCont;
end;

select citasempleado('77777777S', '15/11/12') from dual;

/*4. Crean una función llamada libre en la que dado un empleado, una fecha y un momento devuelva SI si el empleado no tiene 
citas para esa fecha y momento, y NO si no es así.*/

create or replace function libre (auxEmpleado empleado.nif%type, auxFecha cita.fecha%type, auxMomento cita.momento%type) return varchar
is
    auxOK varchar(2) := 'SI';
    cursor c1 is 
        select fecha, momento, empleado from cita;
begin
    for regc1 in c1 loop
        if regc1.fecha = auxFecha and regc1.momento = auxMomento and regc1.empleado = auxEmpleado then
            auxOk := 'NO';
        end if;
    end loop;
    
    return auxOK;
end;

select libre('77777777S', '15/11/12', 1) from dual; /*No está libre*/

/*5. Crea una función llamada gastodiario, en la que dado un número de habitación y una fecha, devuelva la cantidad total gastada
en servicios por esa habitación en esa fecha.*/

create or replace function gastodiario(auxHab habitacion.numero%type, auxFecha consumir.fecha%type) return number
is 
    auxCantidad number := 0;
    cursor c1 is 
        select c.habitación habitacion, c.fecha fecha, (c.cantidad * s.precio) total from consumir c, servicio s
        where c.servicio = s.codigo;
begin
    for regc1 in c1 loop
        if regc1.habitacion = auxHab and regc1.fecha = auxFecha then 
            auxCantidad := auxCantidad + regc1.total;
        end if;
    end loop;
    return auxCantidad;
end;


select gastodiario(2, '12/11/12')from dual;


        

/*6. Crea una función llamada gastotal, en la que dado un número de reserva, devuelva la 
cantidad total gastada en servicios por esa reserva.*/
create or replace function gastotal(auxReserva calendreservas.reserva%type) return number
is
    auxGasto number;
begin
    select sum(s.precio * c.cantidad) total into auxGasto from consumir c, servicio s, calendreservas r
    where auxReserva = r.reserva and r.habitacion = c.habitación and r.fecha = c.fecha and c.servicio = s.codigo;
    return(auxGasto);
end;

select gastotal(1)from dual;


/*7. Crea una función que dado un código de tratamiento nos devuelva la cantidad total de clientes que 
han solicitado alguna cita para dicho tratamiento.
Nos interesa saber la cantidad de clientes distintos que han recibido el tratamiento, no la cantidad 
de veces que se ha hecho este tratamiento.
*/
create or replace function solTratamiento(auxCod tratamiento.codigo%type) return number
is 
    auxTotal number(4, 0) := 0;
begin
    select count(distinct cliente) into auxTotal from cita 
    where tratamiento = auxCod;
    return auxTotal;
end;
    
select soltratamiento('MAS01')from dual;
    

/*8. Crea una función que dado un código de reserva realizada por télefono nos devuelva el nombre
del empleado que realizó dicha reserva.*/
create or replace function resTelefono1(auxRes reserva.codigo%type) return varchar
is 
    auxNombre empleado.nombre%type := '';
begin
    select e.nombre into auxNombre from empleado e, restelefono r
    where r.reserva = auxRes and r.emprecepcion = e.nif;
    return auxNombre;
end;

select restelefono1(1)from dual;


/* 9. Crea una función en la que se devuelva el nombre del empleado que menos guardias de limpieza tiene.
En caso de que 2 de ellos empaten a menor número de guardias se devolverá el primero alfabéticamente.*/
create or replace function menosGuardias return empleado.nombre%type
is
    auxNombre empleado.nombre%type;
    contador number(1) := 0;
    cursor c1 is 
        select nombre from empleado, calendario
        where nif = emplimpieza
        group by nif, nombre
        having count(*) <= all (select count(*) from calendario
                                where emplimpieza is not null
                                group by emplimpieza)
        order by nombre;
begin
    for g in c1 loop
        contador := contador + 1;
        auxNombre := g.nombre;
        if contador = 1 then exit;
        end if;
    end loop;
    return auxNombre;
end;

select menosguardias() from dual;

        


